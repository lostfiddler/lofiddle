import p5 from 'p5';

const p = new p5();

export function article() {
    const fragment = document.createDocumentFragment();

    const title = document.createElement('h1')
    title.innerText = 'A Normal Distribution of Random Numbers'

    fragment.append(
        title,
        para1,
        gaussian(9),
        gaussian(45),
        para2,
        canvasApp(),
        codeExample
    )
    return fragment;
}

const para1 = document.createElement('div');
render(
<>
<p>Another way to creae a nonuniform distribution of random numbers is to use 
a <b>normal distribution</b>, where the numbers cluster around an average 
value.</p>
<p>As an example think of a crowded classroom. Pick any student and it may 
appear that their height  is random. However it's not the kind of random
that <code class='language-js'>Math.random()</code> or a random function from many 
other libraries produces by default. People's heights aren't uniformly distributed;
there are many more people of about average height than there are very tall or very 
short ones. To accurately reflect this population, random heights close to the 
<b> mean</b> (another word for average) should be more likely to be chosen, while outlying
heights (very short or very tall) should be rarer.</p>
<p>This is sometimes called a Gaussian distribution. A graph of this distribution is 
informally known as a <b>bell curve</b>. The curve is generated by
a <a href='https://en.wikipedia.org/wiki/Gaussian_function'>mathmatical function</a> that
defines the probability of any given value occuring as a function of 
the mean and standard deviation.</p>
<p>You probably have an intuitive sense of the mean (average) of, say the values between
200 and 300, as 250, but what of the <b>standard deviation</b>? What if I were to say
the standard deviation is 3? Or 15? What does this mean for the numbers? The graphs below
illustrate the difference.</p>
</>, para1
)

const para2 = document.createElement('div');
render(
<>
<p>On the top is a distribution with a very low standard deviation, with the majority of the
values piling up around the mean (they don't deviate much from the standard). The version
on the right has a higher standard deviation, so the values are more evenly spread out from
the average (they deviate more).</p>
<p>As an example lets draw a shape with the x-position randomly assigned using a gaussian 
distribution.</p>
<p>The <a href='https://p5js.org'>p5</a> library provides a <code class='language-js'>
randomGaussian()</code> function that returns a normal distribution of random positive
and negative numbers with a mean of 0 and a standard deviation of 1. However you can adjust 
the paramaters by passing the <code class='language-js'>randomGaussian()</code> function 
two arguments: the mean followed by the standard deviation.</p>
<h3>Example: A Gaussian Distribution</h3>
</>, para2
)

const codeExampleText = `function draw() {
    requestAnimationFrame(draw);

    let x = p5.randomGaussian(canvas.width / 2, 60);

    ctx.beginPath();
    ctx.arc(x, canvas.height / 2, 10, 0, 2 * Math.PI)
    ctx.fill();
}`
const codeExample = document.createElement('div');
render(
    <>
    <pre><code class='language-js'>{codeExampleText}</code></pre>
    </>, codeExample
)

function gaussian(stdDev) {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    canvas.width = window.env.canvasWidth;
    canvas.height = window.env.canvasHeight;

    canvas.style.width = `${canvas.width / 2}`
    canvas.style.height = `${canvas.height / 2}`

    function gaussian(x, mean, stdDev, height) {
        const exponent = -Math.pow(x - mean, 2) / (2 * Math.pow(stdDev, 2));
        return height * (Math.exp(exponent) / (stdDev * Math.sqrt(2 * Math.PI)))
    }

    function drawGaussian() {
        const mean = canvas.width / 2;
        const height = 7000;

        ctx.lineWidth = 4;
        ctx.strokeStyle = 'red'
        ctx.beginPath();
        for (let x = 0; x < canvas.width; x++) {
            const y = canvas.height - gaussian(x, mean, stdDev, height);
            if (x === 0) {
                ctx.moveTo(x, y);
            } else {
                ctx.lineTo(x, y);
            }
        }
        ctx.stroke();
    }

    drawGaussian();

    return canvas;
}

function canvasApp() {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');

    canvas.width = window.env.canvasWidth;
    canvas.height = window.env.canvasHeight;

    ctx.fillStyle = 'red'
    ctx.globalAlpha = 0.2
    function draw() {
        requestAnimationFrame(draw);

        let x = p.randomGaussian(canvas.width / 2, 60);

        ctx.beginPath();
        ctx.arc(x, canvas.height / 2, 10, 0, 2 * Math.PI)
        ctx.fill();
    }

    draw()

    return canvas;
}
